#!/usr/bin/env bash

set -e
set +v

if ! type kubectl > /dev/null; then
    # Get kubectl and make it executable
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl
fi

# Authenticate on GCP
echo -n $CI_SERVICE_ACCOUNT_KEY | base64 -d > travis-service-account.json
gcloud auth activate-service-account $CI_SERVICE_ACCOUNT --key-file travis-service-account.json --project=$PROJECT_ID

gcloud config set compute/zone europe-west1-c
gcloud config set core/project $PROJECT_ID
gcloud container clusters get-credentials api-platform-demo --zone europe-west1-c --project $PROJECT_ID

# Update dependencies & docker image and push them taking care to separate by repositories and branches.
helm dependency update ./api/helm/api

gsutil mb -p $PROJECT_ID -l eu gs://$ADMIN_BUCKET || echo "Admin bucket exists"
gsutil mb -p $PROJECT_ID -l eu gs://$CLIENT_BUCKET || echo "Client bucket exists"

# Build and push the docker images.
docker build --pull -t $PHP_REPOSITORY:$TAG api --target api_platform_php
docker build --pull -t $NGINX_REPOSITORY:$TAG api --target api_platform_nginx
docker build --pull -t $VARNISH_REPOSITORY:$TAG api --target api_platform_varnish
gcloud docker -- push $PHP_REPOSITORY:$TAG
gcloud docker -- push $NGINX_REPOSITORY:$TAG
gcloud docker -- push $VARNISH_REPOSITORY:$TAG

# Perform a rolling update if a release in the given namespace ever exist, create one otherwise.
echo "Installing/upgrading release '${RELEASE}' on namespace '${NAMESPACE}'"
helm upgrade --install --create-namespace --reset-values --namespace=$NAMESPACE --cleanup-on-fail $RELEASE ./api/helm/api \
    --set php.corsAllowOrigin=$CORS_ALLOW_ORIGIN \
    --set php.trustedHosts=$TRUSTED_HOSTS \
    --set php.image.repository=$PHP_REPOSITORY,php.image.tag=$TAG \
    --set php.mercure.jwtSecret=$MERCURE_JWT_SECRET \
    --set php.jwt.secretKey="$JWT_SECRET_KEY" \
    --set php.jwt.publicKey="$JWT_PUBLIC_KEY" \
    --set php.jwt.passphrase="$JWT_PASSPHRASE" \
    --set php.apiEntrypointHost=$API_ENTRYPOINT \
    --set nginx.image.repository=$NGINX_REPOSITORY,nginx.image.tag=$TAG \
    --set varnish.image.repository=$VARNISH_REPOSITORY,varnish.image.tag=$TAG \
    --set blackfire.blackfire.server_id=$BLACKFIRE_SERVER_ID \
    --set blackfire.blackfire.server_token=$BLACKFIRE_SERVER_TOKEN \
    --set blackfire.blackfire.enabled=$BLACKFIRE_ENABLED \
    --set postgresql.postgresqlPassword=$DATABASE_PASSWORD \
    --set ingress.hosts[0].host=$API_ENTRYPOINT \
    --set ingress.hosts[0].paths[0]=/* \
    --set ingress.hosts[1].host=$MERCURE_ENTRYPOINT \
    --set ingress.hosts[1].paths[0]=/* \
    --set external-dns.cloudflare.apiKey=$CF_API_KEY \
    --set external-dns.cloudflare.email=$CF_API_EMAIL \
    --set mercure.publishUrl="http://${RELEASE}-mercure/.well-known/mercure" \
    --set mercure.subscribeUrl="https://${MERCURE_ENTRYPOINT}/.well-known/mercure" \
    --set mercure.jwtKey=$MERCURE_JWT_KEY \
    --set mercure.corsAllowedOrigins="https://${CLIENT_BUCKET} https://${ADMIN_BUCKET}"

# Reload fixtures: this is specific for this project!
echo "Waiting for the PHP container to be up and ready..."
kubectl rollout status -n "$NAMESPACE" -w "deployment/${RELEASE}-api-php"
kubectl rollout status -n "$NAMESPACE" -w "statefulset/${RELEASE}-postgresql"
kubectl exec --namespace=$NAMESPACE -it $(kubectl --namespace=$NAMESPACE get pods -l app.kubernetes.io/name=api-php -o jsonpath="{.items[0].metadata.name}") \
    -- sh -c 'APP_ENV=dev composer install -n --no-scripts && bin/console doctrine:schema:update --force -e prod && bin/console hautelook:fixtures:load -n -e dev && APP_ENV=prod composer --no-dev install --classmap-authoritative && exit 0'
echo -e "\033[0;33m\e[1mAPI successfully deployed to https://${API_ENTRYPOINT}\e[8m\033[0m"
echo -e "\033[0;33m\e[1mMercure successfully deployed to https://${MERCURE_ENTRYPOINT}\e[8m\033[0m"

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# Build & deploy the admin.
cd admin && CI=false yarn install && REACT_APP_API_ENTRYPOINT=https://$API_ENTRYPOINT CI=false yarn build --environment=prod && cd ..
gsutil rsync -R admin/build gs://$ADMIN_BUCKET
gsutil web set -m index.html -e index.html gs://$ADMIN_BUCKET
gsutil iam ch allUsers:objectViewer gs://$ADMIN_BUCKET
$DIR/bin/flarectl dns c --zone=$DOMAIN --name=$ADMIN_BUCKET --type=CNAME --content=c.storage.googleapis.com --proxy
echo -e "\033[0;33m\e[1mAdmin successfully deployed to https://${ADMIN_BUCKET}\e[8m\033[0m"

# Build & deploy the client.
cd client && yarn install && REACT_APP_ADMIN_HOST_HTTPS=https://$ADMIN_BUCKET REACT_APP_API_CACHED_HOST_HTTPS=https://$API_ENTRYPOINT REACT_APP_API_ENTRYPOINT=https://$API_ENTRYPOINT yarn build --environment=prod && cd ..
gsutil rsync -R client/build gs://$CLIENT_BUCKET
gsutil web set -m index.html -e index.html gs://$CLIENT_BUCKET
gsutil iam ch allUsers:objectViewer gs://$CLIENT_BUCKET
$DIR/bin/flarectl dns c --zone=$DOMAIN --name=$CLIENT_BUCKET --type=CNAME --content=c.storage.googleapis.com --proxy
echo -e "\033[0;33m\e[1mClient successfully deployed to https://${CLIENT_BUCKET}\e[8m\033[0m"
